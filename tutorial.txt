| \gWelcome to repl-show!

repl-show is a little tool to build presentations
using the Clojure repl.

It is a good option for training sessions and talks
with some live coding. More on that later.

To continue, type the letter '\b(n)\s' (no quotes) and \bRETURN\s.
---
You use '\b(n)\s' to advance to the next slide.

Let's try it, type '\b(n)\s' again to see it.
---
To go back to a previous slide, you can type '\b(p)\s'.

Try '\b(p)\s' now to return to the prior slide and
then use '\b(n)\s' twice to go to the next slide.

But please be careful to not read and
follow these instructions again.

You would not want to get stuck in a
infinite loop between two slides forever.
---
Nice, I am glad you made your way to this slide.

But you know, all that "use '\b(n)\s' twice" business was a lot of effort.

There should be a better way to advance two slides at once.

And, as a matter of fact, there is!

You should try '\b(n 2)\s'. Go ahead, enter '\b(n 2)\s' and see what happens!
---
Holy cow, that was awesome!

OK, let's try something new again.

This time I want you to enter '\b(l)\s' (ell).

I'm not telling what it does.
---
OK, you have just skipped a slide.

Aren't you curious to know what that slide had to say?

You already know that you could use '\b(p)\s' to go back,
but let's try something different now.

The slide you missed was slide number 5.

To jump to slide 5, just use the command '\b(g 5)\s'. Go!
---
| \gBasics

Creating presentations is very easy.

All you need is a plain text file. Anything you write in the file is
displayed on the screen, centered vertically and horizontally.

To separate slides, just put three dashes (\r---\s) on a line by themselves.

It is also possible to create "builds", where a slide is
displayed incrementally, step by step.

Think bullet points in Powerpoint.

Advance to the next slide to learn more about builds.
---
| \gBuilds (Incremental Slides)

Builds are separated by two dashes (\r--\s) on a line by themselves.

Type '\bn\s' a few times to see how it works.
--

\*Phase 1\s: Collect underpants
--

\*Phase 2\s: ?
--

\*Phase 3\s: Profit
---
| \gText Alignment

Text can be aligned with ease. Just start a line with one of the
following commands. The space after the command is mandatory.

<< '\r<< \s' flushes the line to the left of the screen.

< '\r< \s' aligns the line to the left of the slide (default).

| '\r| \s' centers the line.

> '\r> \s' aligns the line to the right of the slide.

>> '\r>> \s' flushes the line to the right of the screen.

Whitespace other than the one following the alignment command
is preserved. You can easily align manually if needed.
---
| \gANSI Color Support

\rOh \gmy \bgosh, \cit's \mfull \yof \scolors\r!\g!\b!\c!\m!\y!\w!\k!

ANSI color escape codes:
\\r \rred\s   \\g \ggreen\s    \\b \bblue\s    \\k \kblack
\\c \ccyan\s  \\m \mmagenta\s  \\y \yyellow\s  \\w \wwhite

\\* is for \*bold\s. You can combine it with colors, too:
   \*\rred\s      \*\ggreen\s       \*\bblue\s       \*\kblack
   \*\ccyan\s     \*\mmagenta\s     \*\yyellow\s     \*\wwhite

Capital letters set background color:
\\R \Rred\s   \\G \Ggreen\s    \\B \Bblue\s    \\K \Kblack
\\C \Ccyan\s  \\M \Mmagenta\s  \\Y \Yyellow\s  \\W \Wwhite

Use \\_ for \_underline\s and \\! for \!reverse\s.
\\s resets everything back to normal, whatever your normal is.
Use double slashes (\\\\) to escape slashes.
Anything else, like \z, is unaffected.
---
| \gHorizontal Rulers

You can start a line with a forward slash '\r/\s' to
create a horizontal line across your slide:

/

Double slashes '\r//\s' create a line across the entire screen:

//

---
| \gSyntax Highlighting

Basic support for syntax highlighting is also provided.

Just surround your Clojure code with the \r```\s delimiter.

< ```
< (dotimes [n 5] (println "n is" n))
< ```

becomes

```
(dotimes [n 5] (println "n is" n))
```
---
| \gRunning Code

Now, what I personally consider to be the second coolest feature of all:

| \*Running Clojure code straight from your slides!

Let's start with some sample code:

```
(defn fibo []
  (map first (iterate (fn [[p a]] [a (+ p a)]) [1 1])))

(take 12 (fibo))
```

Now, enter '\b(run)\s' and see the Clojure repl execute the code
above as if you had typed it yourself directly in the prompt.
---
That was pretty cool, eh? But it gets better.

Remember we defined  \bfibo\s in the previous slide?

Any slide can now refer to those variables.
They are still in scope. Try it if you don't believe me:

```
(take 15 (fibo))
```
--
You can put multiple pieces of code in the same slide, separated
by builds or not. They all get executed properly.
--

Let's try it. First, define a new value:

```
val last = a + b + c
```

And then use it:

```
for (i <- 1 to last) yield i * i
```
---
Oh, noes! This is the last slide.

And here ends our adventure.

But I will leave you with one last command to try: '\bh\s'.

Good luck with that!

Now go back to slide 7 ('\b7 go\s') to learn
how to create your own presentations!

